[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "integrated-social-media-talent-recommendation-analysis-system"
version = "3.0.0"
description = "AI-powered integrated system for analyzing government talent recommendations from emails and social media comments"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8.1"
authors = [
    {name = "AI Team", email = "ai-team@example.com"},
]
keywords = [
    "ai", "artificial-intelligence", "government", "talent-management", 
    "social-media", "email-analysis", "ollama", "openai", "claude", 
    "nlp", "text-analysis", "python"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Communications :: Email",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "beautifulsoup4>=4.12.2",
    "chardet>=5.2.0",
    "lxml>=4.9.0",
    "pandas>=2.0.0",
    "python-magic>=0.4.27",
    "requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/username/integrated-social-media-talent-recommendation-analysis-system"
Repository = "https://github.com/username/integrated-social-media-talent-recommendation-analysis-system"
Documentation = "https://github.com/username/integrated-social-media-talent-recommendation-analysis-system/wiki"
Issues = "https://github.com/username/integrated-social-media-talent-recommendation-analysis-system/issues"

# 빌드 설정 - 스크립트 파일들 포함
[tool.hatch.build.targets.wheel]
include = [
    "main.py",
    "email_analyzer.py",
    "README.md",
    "LICENSE",
]

[project.scripts]
talent-analyzer = "main:main"
email-analyzer = "email_analyzer:main"

[project.optional-dependencies]
ai = [
    "anthropic>=0.18.0",
    "openai>=1.0.0",
]
# 모든 의존성 포함 (풀 설치)
all = [
    "anthropic>=0.18.0",
    "openai>=1.0.0",
]

[dependency-groups]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
]

# Black 코드 포매터 설정
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# pytest 설정
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage 설정
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/.venv/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy 설정 (향후 타입 체킹용)
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ruff 설정 (빠른 린터 - flake8 대안)
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
